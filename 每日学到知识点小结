小技巧总结：
五月：
5.3：
String.format()用法：
用于拼接数据。
例：
System.out.println(String.format("我的名字叫%s", "小明")); // 打印:我的名字叫小明
String.format("我叫%s,她叫%s", "小明","小方"); // 我叫小明,她叫小方
1$ 2$用于指定位置
这里会按顺序分别把小明,小方填入到对应的%s中. 如果我们要把小方填在前面,小明填在后面,
String.format("我叫%2$s,她叫%1$s", "小明","小方"); // 我叫小方,她叫小明

如何做策略分发：
参考文档：https://docs.alipay.com/pre-open/20170601105911096277/wob270
官方文档实例:
AlipayClient alipayClient = new DefaultAlipayClient("https://openapi.alipay.com/gateway.do","app_id","your
private_key","json","GBK","alipay_public_key","RSA2");
AlipayUserAgreementQueryRequest request = new AlipayUserAgreementQueryRequest();
request.setBizContent("{" +
"\"personal_product_code\":\"GENERAL_WITHHOLDING_P\"," +
"\"alipay_user_id\":\"2088101122675263\"," +
"\"alipay_logon_id\":\"abx@alitest.com\"," +
"\"sign_scene\":\"INDUSTRY|MEDICAL\"," +
"\"external_agreement_no\":\"test\"," +
"\"third_party_type\":\"PARTNER\"," +
"\"agreement_no\":\"20170322450983769228\"" +
" }")
AlipayUserAgreementQueryResponse response = alipayClient.execute(request);
if(response.isSuccess()){
System.out.println("调用成功");
} else {
System.out.println("调用失败");
}

策略分发代码结构：

IQueryStrategy---->总接口（需要调用的策略全部继承这个接口）
->实现类：AliPayPayContractQueryStrategyImpl(用于实现需要返回的数据类型和内容层)
->AliPayPayContractQueryAgent(根据文档在这里进行配置，用于返回response结果集)

策略分发：具体如何策略分发代码，参见PayContractThirdPartRepository


5.4
1.element-ui: el-table 的话 只能读list类型数据
例：
前端：对单一数据进行List处理：
columnContractList:[]

this.payContractColumnValue.contractCode = vSearch.contractCode;
this.payContractColumnValue.contractType = vSearch.contractType;
this.payContractColumnValue.status = vSearch.status;
this.payContractColumnValue.thirdPartContractNo = vSearch.thirdPartContractNo;
this.payContractColumnValue.userUnionId = vSearch.userUnionId;
this.payContractColumnValue.validTime = vSearch.validTime;

this.columnContractList[0] = this.payContractColumnValue;

2.并行处理事件，不要平行去写事件，
要一个方面里面套另一个方法，这种形式比较合理。

3.居中css写法参考：
.showCenter {
    text-align:center;
    width:100%;
    height:100%;
    margin:0px;
}

4.表数据 @JsonIgnoreProperties(ignoreUnknown = true)

@RequestMapping("/queryByCondition")
@CrossOrigin
@ResponseBody
public Map<String, Object> generatePayContractByCondition(@RequestBody PayContractTransVO payContractTransVO)

可解决null问题，未知没有变量参数自动赋值null


5.7：
order by sql写法顺序
<include refid="selectSql"/>
<include refid="whereSql"/>
ORDER BY id desc
limit #{offset}, #{limit}

语法：
SELECT select_list　　　
FROM table_name　　
[ WHERE search_condition ]　　
[ GROUP BY group_by_expression ]　　
[ HAVING search_condition ]　　
[ ORDER BY order_expression [ ASC | DESC ] ]
[limit m,n]

HTTP：
HTTP之URL
HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息
URL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：
http://www.aspxfans.com:8080/news/index.asp?boardID=5&ID=24618&page=1#name

从上面的URL可以看出，一个完整的URL包括以下几部分：
1.协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在"HTTP"后面的“//”为分隔符
2.域名部分：该URL的域名部分为“www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用
3.端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口
4.虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”
5.文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名
6.锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分
7.参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&ID=24618&page=1”。参数可以允许有多个参数，参数与参数之间用“&”作为分隔符。

#的涵义
#代表网页中的一个位置。其右面的字符，就是该位置的标识符。比如，http://www.example.com/index.html#print就代表网页index.html的print位置。浏览器读取这个URL后，会自动将print位置滚动至可视区域。
为网页位置指定标识符，有两个方法。一是使用锚点，比如<a name="print"></a>，二是使用id属性，比如<div id="print">

Spring:
@ControllAdvcie注解

http协议详解：
https://www.cnblogs.com/ranyonsue/p/5984001.html

5.8：
vue加载图片

5.9:
@interface 注解类:
@Target 和 @Retention 关键字用法；
https://blog.csdn.net/bluetjs/article/details/52250596
https://blog.csdn.net/briblue/article/details/73824058
@Retention(RetentionPolicy.RUNTIME)
RetentionPolicy.SOURCE 注解只在源码阶段保留，在编译器进行编译时它将被丢弃忽视。
RetentionPolicy.CLASS 注解只被保留到编译进行的时候，它并不会被加载到 JVM 中。
RetentionPolicy.RUNTIME 注解可以保留到程序运行的时候，它会被加载进入到 JVM 中，所以在程序运行时可以获取到它们
AuthAspect.java AOP切面实现层

@Target
ElementType.ANNOTATION_TYPE 可以给一个注解进行注解
ElementType.CONSTRUCTOR 可以给构造方法进行注解
ElementType.FIELD 可以给属性进行注解
ElementType.LOCAL_VARIABLE 可以给局部变量进行注解
ElementType.METHOD 可以给方法进行注解
ElementType.PACKAGE 可以给一个包进行注解
ElementType.PARAMETER 可以给一个方法内的参数进行注解
ElementType.TYPE 可以给一个类型进行注解，比如类、接口、枚举


Controller 层
@AuthRequired(authType = AuthRequired.CHECK_BLACKLIST)

5.14
时间转换，单元测试使用：
String data = "2017-08-02 21:43:00";
SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
Date testDate = new Date();
testDate = dateFormat.parse(data);


5.15-16
制作项目设计

5.17
拼接字符串：
用StringBuffer pathStart = .....
  StringBuffer pathEnd = ......
StringBuffer result = new StringBuffer();
result.append(pathStart);
result.append(......);

截取字符串：
String test = sb.substring(sb.indexof("{"), sb.lastIndexOf("}") + 1);


写出文件：
FileOutPutStream os = new FileOutPutStream(new File("文件需保存路径"), true); true 为append false为重新新建
os.write((需要写入的string + "").getBytes());

5.21
Date 转换
Date声明：
Date testDay = new Date(); //默认值为系统当前时间 Tue May 22 00:00:00 CST 2018
使用long类型进行赋值：
Date testDay = new Date(1526961202606L);
获取long值：
testDay.getTime();

控制时间：
Calendar calendar = Calendar.getInstance();
calendar.set(Calendar.HOUR_OF_DAY,calendar.get(Calendar.HOUR_OF_DAY) - 1); 把当前时间减一小时
calendar.getTime(); //Tue May 22 00:00:00 CST 2018
calendar.getTime().getTime(); //1526961202606L
https://blog.csdn.net/huawangxin/article/details/53232531

时间，只取中间的
https://zhidao.baidu.com/question/2269393022118945108.html
Date dateTest = new Date();
SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss", Locale.getDefault());
String str = sdf.format(dateTest);

DateTimeFormatter:
eg:
private static final DateTimeFormatter MONTH_ID_DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyyMMdd");
LocalDate localDate = LocalDate.parse(dayId.toString(), MONTH_ID_DATE_FORMATTER);

LocalDate String 相互转换：
  LocalDate date = LocalDate.now();
  String text = date.format(formatter);
  LocalDate parsedDate = LocalDate.parse(text, formatter);



5.24：
Java运行时的多态，后期绑定的初始化顺序
发生了运行时多态的时候，首先初始化基类，然后再初始化子类，然后再后期绑定子类的方法。

5.25
Pay-Jobs定时工程

5.29
https://www.cnblogs.com/cdf-opensource-007/p/7106018.html

JSON对象转换
{"appId":"wxac97282f648ad42e"}
JSON格式字符串与JSON对象之间的转换。

JSONObject jsonObject = JSON.parseObject(JSON_OBJ_STR);
//JSONObject jsonObject1 = JSONObject.parseObject(JSON_OBJ_STR); //因为JSONObject继承了JSON，所以这样也是可以的
System.out.println(jsonObject.getString("studentName")+":"+jsonObject.getInteger("studentAge"));

指定Json转换类型：
Class PrepayOrderPO {
  String age;
  String name;
  get set method
}

PrepayOrderPO prepayOrderPO = JSON.parseObject(xxxxxxJSON数据xxxxxxxx，PrepayOrderPO.class);

6.20：

    <select id="queryJoinSchedule" parameterType="map" resultType="com.lingshou.bigdata.po.TaskScheduleJoinPO">
        select
        taskInfo.`id` as id,
        taskInfo.`task_name` as task_name,
        taskInfo.`task_type` as task_type,
        taskInfo.`file_id` as file_id,
        taskInfo.`owner` as owner,
        taskInfo.`auditor` as auditor,
        taskInfo.`source_table_id` as source_table_id,
        taskInfo.`target_table_id` as target_table_id,
        taskInfo.`sql_id` as sql_id,
        taskInfo.`task_status` as task_status,
        scheduleInfo.`task_id` as task_id,
        scheduleInfo.`store_type` as store_type,
        scheduleInfo.`is_init` as is_init,
        scheduleInfo.`sche_type` as sche_type,
        scheduleInfo.`sche_freq` as sche_freq,
        scheduleInfo.`sche_time` as sche_time,
        scheduleInfo.`is_depself` as is_depself
        from `ls_dat_task_info` taskInfo LEFT JOIN `ls_dat_schedule_info` scheduleInfo
        on taskInfo.`id` =scheduleInfo.`task_id`
        <include refid="joinWhereTaskSql"/>
        limit #{offset}, #{limit}
    </select>

    <select id="countTaskPage" resultType="int">
      SELECT count(1)
      from `ls_dat_task_info` taskInfo LEFT JOIN `ls_dat_schedule_info` scheduleInfo
      on taskInfo.`id` =scheduleInfo.`task_id`
      <include refid="joinWhereTaskSql"/>
    </select>

6.27:
List<TablePermCheckResultVO> tablePermCheckResultVOList = Lists.newArrayList();
List<TablePermCheckResultVO> tablePermCheckResultVOList = new ArrayList<>();
本质上是一样的

6.30：
对收集到的数据进行分类:
List<DbTableDdlInfoQueryDTO> dbTableDdlInfoQueryDTOList
Map<Long, List<DbTableDdlInfoQueryDTO>> dbTableDdlInfoDTOMap = dbTableDdlInfoQueryDTOList.stream().collect(Collectors.groupingBy(DbTableDdlInfoQueryDTO :: getDbId));
for (Long key : dbTableDdlInfoDTOMap.keySet()) {
}

7.1：
Postman 调用get post方法：
get：正常
post：组装json格式
http://localhost:8080/datamanage/dbtable/saveSql
Headers: Content-type要选   ：application/json
Body：{"sqlContext":"create table","dbNameSelected":19}

7.2：
事务管理：
在ServiceImpl层方法
@Transactional(rollbackFor =Exception.class)

xml文件配置见前面

7.3：
player_id是主键
INSERT INTO ls_account_union VALUES(?,?,?,?,?,?) ON DUPLICATE KEY " + " UPDATE phone=?, phone_status=?, is_valid=?, create_time=?, update_time=?
insert into player_count(player_id,count) value(1,1) on duplicate key update count=count+1;

7.4：
连表查询 in join 用法

7.16
格式转换
String to Integer
Integer userId = Integer.parseInt(userWord);
Double to String
String.valueOf(double)

7.17
BeanCopyUtil推荐使用
AttendanceClassDetailBO bo = BeanCopyUtil.copy(po, AttendanceClassDetailBO.class);

7.18：java8日期处理：
LocalDateTime begin = LocalDate.now().atStartOfDay();
LocalDateTime end = begin.plusDays(15);

LocalDate begin = LocalDate.now();
LocalDate end = begin.plusDays(15);

LocalDateTime 转 Date
Date beginDate = Date.from(begin.atZone(ZoneId.systemDefault()).toInstant());
Date endDate = Date.from(end.atZone(ZoneId.systemDefault()).toInstant());

Date 转 LocalDateTime
Date date = new Date();
LocalDateTime localDateTime = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();

LocalDate.now() : 2018-07-21

String 类型转localDate
LocalDate beginDateTime = LocalDate.parse(beginDate, DateTimeFormatter.ofPattern(“yyyy-MM-dd”));
或者直接用：
LocalDate.parse(req.getEndDate()) --> LocatDate 类型



7.19 java8 stream类型：
将Object中的两个对象转成Map一一对应：
stream().collect:
Collectors.toMap
Map<Integer, Integer> stockCurStockMap = stockBOList.stream().collect(Collectors.toMap(StockBO::getShopId, StockBO::getCurStock));
Map<Integer, SkuCommodityBO> map = skuCommodityBOS.stream().collect(Collectors.toMap(SkuCommodityBO::getSkuId, s -> s));

steam().distinct:
List<String> memberIdList = exchBrokers.stream().map(xxx -> xxx.getMemberId()).distinct().collect(Collectors.toList());

stream().sorted:
storeShopSkuStatisticsDataBOList = storeShopSkuStatisticsDataBOList.stream().sorted(Comparator.comparing(StoreShopSkuStatisticsDataBO::getShopId)).collect(toList());
当有空指针情况处理:

stream().filter:
List<MercuryUserDTO> filterDTOS = userDTOS.stream().filter(dto -> dto.getStatus() == MercuryUserStatusCode.ACTIVE).collect(Collectors.toList());
List<String> result = language.filter(x -> x!=null).collect(Collectors.toList());
List<String> result = language.filter(Objects::nonNull).collect(Collectors.toList());
shopBoList.stream().filter(item -> storeId.equals(item.getCity())).collect(Collectors.toList());

stream().map:
List<CommodityItemBo> itemBos;
List<BackCategoryBO> backCategoryBOS = itemBos.stream().map(BoBuildUtils::buildBackCategory).collect(Collectors.toList());

BoBuildUtils.java
public static BackCategoryBO buildBackCategory(CommodityItemBo commodityItemBo) {
       BackCategoryBO bo = new BackCategoryBO();
       bo.setId(commodityItemBo.getClassId());
       bo.setName(commodityItemBo.getClassName());
       return bo;
}

stream().flatMap:
把几个小的list转换到一个大的list。

List<String> teamIndia = Arrays.asList("Virat", "Dhoni", "Jadeja");
List<String> teamAustralia = Arrays.asList("Warner", "Watson", "Smith");
List<List<String>> playersInWorldCup2016 = new ArrayList<>();
playersInWorldCup2016.add(teamIndia);
playersInWorldCup2016.add(teamAustralia);
List<String> listOfAllPlayers = new ArrayList<>();
for(List<String> team : playersInWorldCup2016) {
  for(String name : team){
    listOfAllPlayers.add(name);
  }
}

flatMap使用：
// Now let's do this in Java 8 using FlatMap
List<String> flatMapList = playersInWorldCup2016.stream() .flatMap(pList -> pList.stream()) .collect(Collectors.toList())




非空判断：
List<AttendanceScheduleBO> attendanceScheduleBOS = scheduleBOListDateMap.get(dateString).stream().filter(bo -> Objects.nonNull(bo.getWorkHours())).collect(Collectors.toList());

匹配到第一个枚举值就返回：findFirst()；
SearchSkuBO skuBO = skuBOList.stream().filter(e -> e.getSkuId() == skuBo.getSkuId()).findFirst().orElse(null);
匹配到某一个枚举值返回： findAny();
匹配任何一个则返回Ture: anyMatch();
Boolean result = skuBOList.stream().anyMatch(e -> e.getSkuId() == skuBo.getSkuId());
匹配到所有才返回Ture： allMatch();
Boolean result = skuBOList.stream().allMatch(e -> e.getSkuId() == skuBo.getSkuId());

Optional非空处理：
Integer type = null;
type = ofNullable( type ).orElse( 0 );

List<Integer> list ....
Optional.ofNullable(list).orElse(emptyList());
List<ShopBo> shopBoList = Optional.ofNullable(manageShopResult.getResult()).orElse(Collections.emptyList());
判定那个抛出Npe

Objects.requireNonNull(xxxx);
String safeKey = Objects.requireNonNull(key, "Key is null"); "后面是message";

综合使用：
List<CheckOrderVO> checkOrderVOS = Optional.ofNullable(stockCheckOrderBOPageInfo.getList()).orElse(Collections.emptyList()).stream().map(stockCheckOrderBO -> {
              CheckOrderVO checkOrderVO = new CheckOrderVO();
              BeanUtils.copyProperties(stockCheckOrderBO, checkOrderVO);
              checkOrderVO.setOrderCode(stockCheckOrderBO.getCode());
              checkOrderVO.setOrderStatus(stockCheckOrderBO.getStatus());
              checkOrderVO.setStoreName(stockCheckOrderBO.getShopName());
              checkOrderVO.setCreateTime(stockCheckOrderBO.getCreateTime());
              return checkOrderVO;
          }).collect(Collectors.toList());


peek 先做预处理再进行流:
eg: list.stream().peek(bo -> {
    bo.setShopName(shopNameMap.get(bo.getShopId()));
                        }).collect(Collectors.toList());
eg: statisticsWeekBO.setWeekData(weekBos.stream().peek(StoreStatisticDataUtils::calAllMetrics).collect(Collectors.toList()));

public static void calAllMetrics(StatisticsDataBO bo) {
    bo.setShoppingPoints(StoreStatisticDataUtils.calShoppingPoints(bo));
    bo.setPerCustomerTransaction(StoreStatisticDataUtils.calPerCustomerTransaction(bo));
    bo.setScrapRate(StoreStatisticDataUtils.calScrapRate(bo));
    bo.setSaleMoneyExcludeRefundMoney(calSaleMoneyExcludeRefundMoney(bo));
}




sql:
SELECT  `merch_id`, sum(count), `adjustment_reason`,  `create_time`
FROM `store_sku_stock_optlog`
where `shop_id` = 50 and `merch_id` = 2310 GROUP BY `create_time` , `adjustment_reason` ORDER BY `create_time` DESC

8.1 List集合去重
1.HashSet去重：（无法保证原来顺序）
    HashSet h = new HashSet(list);
    list.clear();
    list.addAll(h);

2.

8.2 Lion配置
KEY:
List<Integer> days = Lion.getList("store-commodity-service.sku.expire.remind.days", Integer.class);

8.3 chomd
http://www.runoob.com/linux/linux-comm-chmod.html
chomd abc file // chomd 777 fileName
scp 复制文件和目录

8.8
修改成ONEWAY:

InvokerConfig<SkuExpireDataJobService> invokerConfig =
                new InvokerConfig<>("http://service.owitho.com/retail/storeService/SkuExpireDataJobService_2.0.0", SkuExpireDataJobService.class);

invokerConfig.setCallType(CallMethod.ONEWAY.getName());
SkuExpireDataJobService skuExpireDataJobService = ServiceFactory.getService(invokerConfig);

8.17:
List只允许添加一个元素
List<String> singList = Collections.singletonList(new String("fe"));

8.23
Integer 和 int 比较
Integer int 比较 Integer 拆箱
Integer Integer == 比较地址 。equals 比较值 不过 -128 ~ 127 会自动拆箱


9.14
HashBaseTable用法：
Table<Integer, Integer, List<SkuPO>> shopMerchIdMap = HashBasedTable.create();
        R        C          V
contains(Object rowKey, Object columnKey)
containsColumn
containsRow
values --> public Collection<V> values()
eg:storeHourData.row(req.getDayId()).values()
                .stream().sorted(Comparator.comparing(StatisticsDataBO::getHourId)).collect(Collectors.toList())

去mybatis 搂数据 不会返null 只会返一个长度为0的空

9.17
https://www.cnblogs.com/igoodful/p/9517784.html
Sorted():
list.stream().sorted();
list.stream().sorted(Comparator.reverseOrder)
使用Comparator 来排序一个list
list.stream().sorted(Comparator.comparing(Student::getAge))
list.stream().sorted(Comparator.comparing(Student::getAge).reversed())
组合比较：
humans.sort(Comparator.comparing(Human::getName).thenComparing(Human::getAge));


当然还可以不用借助steam方式直接排序：
list.sort(Comparator.comparing(Integer::intValue));
list.sort(Comparator.comparing(Integer::intValue).reversed());
list.sort(Comparator.comparing(Student::getAge));
list.sort(Comparator.comparing(Student::getAge).reversed());

如果用null过滤：
Comparator.comparing(Person::getMiddleName(), Comparator.nullsFirst(...))

eg:
Comparator<Student> comparator = Comparator.comparing(Student::getAge,
            Comparator.nullsLast(Comparator.reverseOrder()));
    Collections.sort(list, comparator);
    list.stream().forEach(n -> System.out.println(n.toString()));

eg:
statisticsDTO.setHourData(storeHourData.row(req.getDayId()).values()
                .stream().sorted(Comparator.comparing(StatisticsDataBO::getHourId)).collect(Collectors.toList()));

monitorData = monitorData.stream().peek(bo -> {
                            bo.calPurchaseCount();
                            bo.calOweRate();
                            SkuStockReportUtils.addBOToBO(bo, allStockData);
                        }).sorted(Comparator.comparing(StockMonitorBO::getOweRate, Comparator.nullsFirst(BigDecimal::compareTo)).reversed()).collect(Collectors.toList());





                        checkPlanDetails.forEach(e -> {
                               if (e.getDivId() != null) {
                                   divIds.add(e.getDivId());
                               }
                               if (e.getDeptId() != null) {
                                   deptIds.add(e.getDeptId());
                               }
                               if (e.getClassId() != null) {
                                   classIds.add(e.getClassId());
                               }
                               if (e.getSubclassId() != null) {
                                   subclassIds.add(e.getSubclassId());
                               }
                           });
10-11:
BigDecimal:
取绝对值：
BigDecimal diff = new BigDecimal(initCheck - initShouldStock).abs();

除法：
BigDecimal asd = diff.divide(div,4,RoundingMode.HALF_UP);

10-19：
Pair：
Pair<Integer, String> pair = new Pair<>(1, "One");
Apache 的 ：
Pair<Integer, Integer> pairValue = Pair.of(1,10);
pairValue.getLeft();  pairValue.getValue();


Properties props = new Properties();
KafkaConsumer<String,String> consumer = new KafkaConsumer<>(props);
java.util.Map<TopicPartition,OffsetAndTimestamp> partitionTimestampOffsets = consumer.offsetsForTimes(java.util.Map<TopicPartition,java.lang.Long>)




问同事工作后的第一反应； done
回家都不问； done
830回家 不说辛苦了 拆干净 因为打游戏 发痘痘
不是听我的建议 而是证明我是错的 
说不来就不来 说不打就不打（迪士尼） done
为了将来 存款（打疫苗 等等）
为了将来 （做了些什么）
