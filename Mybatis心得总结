MyBatis心得总结：
核心思想：通过Mybatis的 SqlSessionFactory 和 sqlSession来执行sql语句，
取到一一对应关系。

配置Mybatis-config.xml()

Setup SqlSessionFactory
两种 只有Mybatis
String resource = "path/to/mybatis-config.xml";
InputStream inputStream = Resources.getResourceAsStream(resource);
SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

这是Mybatis-结合Spring 写在Spring
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource" /> <!-- Obliged -->
    <!-- Indicate location of mapper files where exists mysql statements -->
    <property name="mapperLocations" value="classpath*:/mybatis/*Mapper.xml"/>
    <!-- Indicate mybatis config files where exists typeAliases, settings, etc -->
    <property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"/>
</bean>


Define mappers：第一种方法可以直接写在mybatis-config.xml；
Two ways to define:
Annotation based 和 XML based

1.基础语法解析：
id = "对应的方法名" parameterType= "输入的类型"(java.util.List) resultType；输出类型。
resultMap设计java对应变量名和数据库中的数据一一对应。


<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- Mapper.java namespace-->
<mapper namespace="com.gu.spring.mybatis.mapper.UserMapper">
    <select id = "getUserById" parameterType = "int" resultType="com.gu.spring.mybatis.vo.User">
        SELECT
            user_id as userId,
            email_id as emailId ,
            password as password,
            first_name as firstName,
            last_name as lastName
        FROM user
        WHERE user_id = #{userId}
    </select>

    <insert id="insertUser" parameterType = "com.gu.spring.mybatis.vo.User" useGeneratedKeys="true" keyProperty="userId">
        INSERT INTO user(email_id, password, first_name, last_name) VALUES (#{emailId}, #{password} #{password}, #{firstName}, #{lastName})
    </insert>

    <update id = "updateUser" parameterType="com.gu.spring.mybatis.vo.User">
        UPDATE user
        SET
          email_id = #{emailId},
          password = #{password},
          first_name = #{firstName},
          last_name = #{lastName}
        WHERE user_id = #{userId}
    </update>

    <delete id = "deleteUser" parameterType="Integer">
        DELETE FROM user WHERE user_id = #{userId}
    </delete>

    <resultMap type= "com.gu.spring.mybatis.vo.User" id='UserResult'>
        <id property='userId' column='user_id'/>
        <result property='emailId' column='email_id'/>
        <result property='password' column='password'/>
        <result property='firstName' column='first_name'/>
        <result property='lastName' column='last_name'/>
    </resultMap>

    <select id = "getAllUsers" resultMap="UserResult">
        SELECT * FROM user
    </select>

<!--
    <select id = "getAllUsers" resultType="com.gu.spring.mybatis.vo.User">
        SELECT * FROM user
    </select>
-->

</mapper>

<sql id="selectSql">
    SELECT
          id,prepay_order_no,
          biz_type,biz_order_id,biz_order_no,business_type,
          pay_status,refund_status,
          pay_time,notify_url,return_url,user_id,
          total_pay_money,third_part_money,discount_money,
          refund_amount,refund_frozen_amount,return_fail_url,
          platform,pay_subject,pay_desc,
          expire_time,user_ip,device_id,lng,lat,mq_biz_notify_status,
          created_by,create_time,update_time,update_by
    FROM LS_PCT_PrepayOrder
</sql>
自定义会用到很多次的sql语句
使用
<select id="queryByPrepayOrderNo" parameterType="string" resultType="com.lingshou.pay.cashier.po.PrepayOrderPO">
     <include refid="selectSql"/>    ---->这里可以用上面语句对这里进行替换。
       WHERE prepay_order_no = #{prepayOrderNo}
</select>


2.selectkey的用法：(insert完的id 不是作为return值 而是直接赋值到PO上面)
http://blog.csdn.net/xu1916659422/article/details/77921912

<![CDATA[ AND total_pay_money >= (refund_frozen_amount + refund_amount + #{refundFrozenAmount}) ]]>
<![CDATA[      ]]> 防止里面东西被转义，一般用作> = < 上用

(PayTokenMapper.xml)
  <select id="queryByPayOrderIdAndPayToken" parameterType="map" resultType="com.lingshou.pay.cashier.po.PayTokenPO">
  为什么是map？可以传map数据到里面。
  parameterType为入参类型。 resultType为出参类型。


  如何返回List类型数据和如何定义resultMap类型
  https://www.cnblogs.com/panxuejun/p/5851622.html

3.Mybatis 特殊字符
(1)&　　　&amp;
&lt;= 等于 <=;
(3)>　　　&gt;
(4)＂　　　&quot;
(5)＇　　　&apos;

4.insert多条插入语法：
foreach用法: https://blog.csdn.net/m0_37204491/article/details/71436872
<insert id="insertBatch" parameterType="java.util.List" keyProperty="id" useGeneratedKeys="true">
    <![CDATA[
   INSERT INTO ls_dat_meta_blood_analysis_hierarchy
   (remark,source_id,target_id,type,comment,create_by,update_by)
     ]]>
    VALUES
    <foreach collection="list" item="item" index= "index" separator=",">
        <![CDATA[
        (#{item.remark},#{item.sourceId},#{item.targetId},#{item.type},#{item.comment},#{item.createBy},#{item.updateBy})
          ]]>
    </foreach>
</insert>

foreach元素的属性主要有 item，index，collection，open，separator，close。
  item表示集合中每一个元素进行迭代时的别名，
  index指定一个名字，用于表示在迭代过程中，每次迭代到的位置，
  open表示该语句以什么开始，
  separator表示在每次进行迭代之间以什么符号作为分隔符，
  close表示以什么结束。
  collection:
    1.如果传入的是单参数且参数类型是一个List的时候，collection属性值为list
    2.如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array
    3.如果传入的参数是多个的时候，我们就需要把它们封装成一个Map或者Object。

<![CDATA[
]]>这个标记所包含的内容将表示为纯文本

5.useGeneratedKeys和keyProperty成对与否使用的区别

https://segmentfault.com/q/1010000011126611/a-1020000011133986
keyProperty="id" useGeneratedKeys="true"
只使用keyProperty，不使用useGeneratedKeys，就需要配合<selectKey >使用

6.trim 结合 prefix prefixoverride suffixoverride suffix 使用：
https://www.cnblogs.com/qiankun-site/p/5758924.html

trim标记是一个格式化的标记，可以完成set或者是where标记的功能
select * from user
　　<trim prefix="WHERE" prefixoverride="AND | OR">
　　　　<if test="name != null and name.length() > 0"> AND name=#{name}</if>
　　　　<if test="gender != null and gender.length() > 0"> AND gender=#{gender}</if>
　　</trim

update user
　　<trim prefix="set" suffixoverride="," suffix=" where id = #{id} ">
　　　　<if test="name != null and name.length()>0"> name=#{name} , </if>
　　　　<if test="gender != null and gender.length()>0"> gender=#{gender} ,  </if>
　　</trim>

prefix：前缀　　　　　　
prefixoverride：去掉第一个and或者是or
suffixoverride：去掉最后一个逗号（也可以是其他的标记，就像是上面前缀中的and一样）
suffix：后缀

7.#{} 和 ${} 的使用： 反了好像
https://blog.csdn.net/sinat_36183608/article/details/55505493

(1) 采用#{ } 有 ''
select * from Admin where username = ${username}
解析为:
select * from Admin where username = ?

(2)采用${ } 无 '' 直接传值进来
假设传进来的参数的值为”Admin”
select * from Admin where username = ${username }
解析为：
select * from Admin where username = Admin

一个由引号，一个没有，推荐能用# 不用 $
order by 后的参数，也不能用#{ }来传递

碰到接口多入值：
void deleteBrandByIds(@Param("ids")String  ids)

update bbs_brand set is_display=0 where id IN (#{ids})
where id in(?) --> where id in('1,3,5,7')

update bbs_brand set is_display=0 where id IN (${ids})

这里只能够使用$ 进行字符串的拼接,而不是#.



8.like 模糊查询
https://blog.csdn.net/u010398771/article/details/70768280
<if test="condition.taskName != null and condition.taskName != ''">
    and task_name like concat('%',#{condition.taskName},'%')
</if>

CONCAT(str1,str2,…) 函数用于将多个字符串连接成一个字符串。

name like"%"#{name}"%
name like "%"'莲'"%"

name like '%${name}%'
name like'%莲%'

name like concat(concat('%',#{username}),'%')
name like CONCAT(CONCAT('%','莲'),'%')

name like CONCAT('%','${name}','%')
name like CONCAT('%','莲','%')

9.MyBatis 中同时是用返回9

10.JOIN 查询 （双表）IN 语句使用
<select id="queryJoinSchedule" parameterType="map" resultType="com.lingshou.bigdata.po.TaskScheduleJoinPO">
     select
     taskInfo.`id` as id,
     taskInfo.`task_name` as task_name,
     taskInfo.`task_type` as task_type,
     taskInfo.`file_id` as file_id,
     taskInfo.`owner` as owner,
     taskInfo.`auditor` as auditor,
     taskInfo.`source_table_id` as source_table_id,
     taskInfo.`target_table_id` as target_table_id,
     taskInfo.`need_snapshot` as need_snapshot,
     taskInfo.`sql_id` as sql_id,
     taskInfo.`task_status` as task_status,
     scheduleInfo.`task_id` as task_id,
     scheduleInfo.`store_type` as store_type,
     scheduleInfo.`is_init` as is_init,
     scheduleInfo.`sche_type` as sche_type,
     scheduleInfo.`sche_freq` as sche_freq,
     scheduleInfo.`sche_time` as sche_time,
     scheduleInfo.`is_depself` as is_depself
     from `ls_dat_task_info` taskInfo LEFT JOIN `ls_dat_schedule_info` scheduleInfo
     on taskInfo.`id` =scheduleInfo.`task_id`
     <include refid="joinWhereTaskSql"/>
     limit #{offset}, #{limit}
 </select>

 <sql id="joinWhereTaskSql">
     <where>
         <if test="condition.taskStatusList != null">
             and task_status IN (
             <foreach collection="condition.taskStatusList" item="taskStatus" index="index" separator=",">
                 #{taskStatus}
             </foreach>
             )
         </if>
         <if test="condition.scheTypeList != null">
             and sche_type IN (
             <foreach collection="condition.scheTypeList" item="scheType" index="index" separator=",">
                 #{scheType}
             </foreach>
             )
         </if>
     </where>
 </sql>

 11.group by:


 12.逆向生成工具：
 https://www.v2ex.com/t/38076
 https://www.aliyun.com/jiaocheng/778203.html
 insert
 insertSelective
 insertList
 update
 delete
 find
 findById
 findAgeById
 findByIdIn
 findByUserName
 findByAgeGreaterThanAndIdLessThan
 findDistinctUserNameOrderByGlobalIdDesc
 findByAgeGreaterThanOrIdLessThan
 countByIdBetween
 findByIdGreaterThanOrEqualTo
 findByIdLessThanOrEqualTo
 findByIdBetweenOrEqualTo
 count
 findDistinctUserName
 deleteById
 deleteByIdBetween
 findByIdBetween
 countDistinctUserNameByAgeLessThan
 findFirstByuserName
 findDistinctUserNameIn
 findByAgeOrderByUserNameDesc
 findByIdInAndUserNameIn
 updateUserNameById
 updateUserNameAndPasswordByIdBetween
 findMaxIdAndMinId
